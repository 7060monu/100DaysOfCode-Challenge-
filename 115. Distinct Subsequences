class Solution {
public:
// int solvebyrec(int n,int m,string s,string t){
//     if(m==0){
//         return 1;
//     }
//     if(n==0) return 0;

//     if(s[n-1]==t[m-1]){
//         return solvebyrec(n-1,m-1,s,t)+solvebyrec(n-1,m,s,t);
//     }
//     return solvebyrec(n-1,m,s,t);
// }
//     int numDistinct(string s, string t) {
//         return solvebyrec(s.size(),t.size(),s,t);
//     }
int solveByMemo(int n, int m, string& s, string& t, vector<vector<int>>& memo) {
    if (m == 0) {
        return 1;
    }
    if (n == 0) {
        return 0;
    }

    if (memo[n][m] != -1) {
        return memo[n][m];
    }

    if (s[n - 1] == t[m - 1]) {
        memo[n][m] = solveByMemo(n - 1, m - 1, s, t, memo) + solveByMemo(n - 1, m, s, t, memo);
    } else {
        memo[n][m] = solveByMemo(n - 1, m, s, t, memo);
    }

    return memo[n][m];
}

int numDistinct(string s, string t) {
    int n = s.size();
    int m = t.size();

    // Initialize memoization table with -1
    vector<vector<int>> memo(n + 1, vector<int>(m + 1, -1));

    return solveByMemo(n, m, s, t, memo);
}
};
