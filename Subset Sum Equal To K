bool subsetSumToK(int n, int k, vector<int> &arr, vector<vector<int>> &dp) {
    // Base case
    if (k == 0) return true;
    if (n < 0 || k < 0) return false;
    
    
    if (dp[n][k] != -1) {
        return dp[n][k];
    }
    
    // Recursive calls
    bool include = subsetSumToK(n - 1, k - arr[n], arr, dp);
    bool exclude = subsetSumToK(n - 1, k, arr, dp);
    
   
    return dp[n][k] = include || exclude;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
   
    vector<vector<int>> dp(n + 1, vector<int>(k + 1, -1));
    
    return subsetSumToK(n - 1, k, arr, dp);
}
