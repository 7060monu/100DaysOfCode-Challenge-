class Solution {
public:
int solvebyrec(string s,string s1,int n,int m,vector<vector<int>>&dp){
    if(n<=0||m<=0){
        return 0;
    }
    if(dp[n][m]!=-1){
        return dp[n][m];
    }
    if(s[n-1]==s1[m-1]){
        return 1+solvebyrec(s,s1,n-1,m-1,dp);
    }
    int ans = max(solvebyrec(s,s1,n-1,m,dp),solvebyrec(s,s1,n,m-1,dp));
    return dp[n][m] = ans;
}
int solvebytab(string s, string s1, int n, int m) {
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

   
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (s[i - 1] == s1[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    return dp[n][m]; 
}

    int longestPalindromeSubseq(string s) {
        string s1 = s;
        int n = s.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        reverse(s1.begin(),s1.end());
        // return solvebyrec(s,s1,n,n,dp);
        return solvebytab(s,s1,n,n);










    
        // for(int i=1;i<=n;i++){
        //     for(int j =1;j<=n;j++){
        //         if(s[i-1]==s1[j-1]){
        //             dp[i][j] = 1+dp[i-1][j-1];
        //         }
        //         else{
        //             dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        //         }
        //     }
        // }
        // return dp[n][n];
    }
};
