#include <vector>
using namespace std;

class Solution {
public:
    int solvebyrec(int m, int n, vector<vector<int>>& mat,vector<vector<int>>&dp) {
        if (m == 1 && n == 1) return (mat[0][0] == 0) ? 1 : 0;
        if (m <= 0 || n <= 0 || mat[0][0] == 1) return 0;

        if (mat[m - 1][n - 1] == 1) return 0;
        if(dp[m][n!=0]) return dp[m][n];

        int ans = 0;
        ans += solvebyrec(m - 1, n, mat,dp);
        ans += solvebyrec(m, n - 1, mat,dp);
        return dp[m][n]=ans;
    }
    int solvebytab(int m, int n, vector<vector<int>>& mat, vector<vector<int>>& dp) {
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (mat[i-1][j-1] == 1) {
                dp[i][j] = 0; 
            } else {
                if (i == 1 && j == 1) {
                    dp[i][j] = 1; 
                } else {
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
    }
    return dp[m][n];
}

   

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));

        if (m == 1 && n == 1) return (obstacleGrid[0][0] == 0) ? 1 : 0;
        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) return 0;

        // return solvebyrec(m, n, obstacleGrid,dp);
        return solvebytab(m,n,obstacleGrid,dp);
    }
};
