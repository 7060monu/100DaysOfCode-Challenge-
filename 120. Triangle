class Solution {
public:
    int solvebyrec(vector<vector<int>>& triangle, int row, int col,vector<vector<int>>&dp) {
        if (row == triangle.size() - 1) 
            return triangle[row][col];

        if(dp[col][row]!=-1){
            return dp[row][col];
        }    

        int r = triangle[row][col] + solvebyrec(triangle, row + 1, col,dp);
        int d = triangle[row][col] + solvebyrec(triangle, row +1, col + 1,dp);

        return dp[row][col] = min(r, d);
    }

    int solvebytab(vector<vector<int>>& triangle, vector<vector<int>>& dp) {
    int n = triangle.size();

    // Initialize dp with the values of the last row of the triangle
    for (int j = 0; j < triangle[n - 1].size(); ++j) {
        dp[n - 1][j] = triangle[n - 1][j];
    }

    // Bottom-up dynamic programming
    for (int i = n - 2; i >= 0; --i) {
        for (int j = 0; j <= i; ++j) {
            dp[i][j] = triangle[i][j] + min(dp[i + 1][j], dp[i + 1][j + 1]);
        }
    }

    // Minimum path sum is stored in dp[0][0]
    return dp[0][0];
}

    
    int minimumTotal(vector<vector<int>>& triangle) {
        vector<vector<int>>dp(triangle.size()+1,vector<int>(triangle.size(),-1));
        // return solvebyrec(triangle, 0, 0,dp);
        return solvebytab(triangle,dp);
    }
};
