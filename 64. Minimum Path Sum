class Solution {
public:
    int solvebyrec(vector<vector<int>>& grid, int m, int n,vector<vector<int>>&dp) {
        if(m == 1 && n == 1) return grid[0][0];
        
        // Base cases
        if(m == 1) return grid[0][n-1] + solvebyrec(grid, m, n-1,dp);
        if(n == 1) return grid[m-1][0] + solvebyrec(grid, m-1, n,dp);

        if(dp[m-1][n-1]!=-1){
            return dp[m-1][n-1];
        }
        
        int right = grid[m-1][n-1] + solvebyrec(grid, m, n-1,dp);
        int down =  grid[m-1][n-1] + solvebyrec(grid, m-1, n,dp);
        
        return dp[m-1][n-1] = min(right, down);
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        return solvebyrec(grid, m, n,dp);
    }
};
